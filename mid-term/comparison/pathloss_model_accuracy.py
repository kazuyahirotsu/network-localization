import torch # Keep for potential future use or if other functions in script need it
import numpy as np
import matplotlib.pyplot as plt
# from scipy.io import loadmat # No longer loading .mat files directly for this plot
# from tqdm import tqdm # No longer iterating through instances here
import math # Keep for potential future use
import os

# --- Configuration ---
# GCN_MODEL_PATH = "../gcn/trained_localization_model_64beacons_1000instances_fixed.pth" # Not needed for loading GCN params for this plot

# Path to the data file generated by the modified GCN test script
# It should contain (true_distance, gcn_estimated_distance) pairs
TRUE_VS_GCN_ESTIMATED_DIST_PATH = "../gcn/results/gcn_true_vs_estimated_distances_trained_localization_model_64beacons_1000instances_fixed_constrained_offset.npy"

OUTPUT_DIR = "comparison_results"
# New output filename for the new plot type
OUTPUT_FILENAME = "gcn_true_vs_estimated_distance_scatter_constrained_offset.png"

# Origin from MATLAB code (can be kept for context or other functions, though not directly used in this specific plot logic)
mapOriginLat = 40.466198
mapOriginLon = 33.898610
earthRadius = 6378137.0
metersPerDegreeLat = (math.pi / 180) * earthRadius
metersPerDegreeLon = (math.pi / 180) * earthRadius * np.cos(np.deg2rad(mapOriginLat))

# Font sizes for paper quality (can keep as is)
TITLE_FONT_SIZE = 20
AXIS_LABEL_FONT_SIZE = 18
TICK_LABEL_FONT_SIZE = 16
LEGEND_FONT_SIZE = 16
SUPTITLE_FONT_SIZE = 22
# PARAM_TEXT_FONT_SIZE = 14 # Not displaying GCN params directly on this plot now

# --- Utility Functions ---
# def latlon_to_xy(...): # Keep if other parts of script might use it, not essential for this plot
# def predict_rssi(...): # This function is NOT needed here as GCN estimates are pre-calculated

# --- Main Script ---
def main():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    # device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') # Not strictly needed now
    # print(f"Using device: {device}")

    # 1. Load (True Distance, GCN Estimated Distance) Data
    print(f"Loading true vs. GCN estimated distances from: {TRUE_VS_GCN_ESTIMATED_DIST_PATH}")
    if not os.path.exists(TRUE_VS_GCN_ESTIMATED_DIST_PATH):
        print(f"ERROR: Data file not found at {TRUE_VS_GCN_ESTIMATED_DIST_PATH}")
        print("Please ensure you have run the modified GCN test script first to generate this file.")
        return

    try:
        distance_pairs = np.load(TRUE_VS_GCN_ESTIMATED_DIST_PATH)
    except Exception as e:
        print(f"Error loading data from {TRUE_VS_GCN_ESTIMATED_DIST_PATH}: {e}")
        return

    if distance_pairs.ndim != 2 or distance_pairs.shape[1] != 2:
        print(f"ERROR: Loaded data has incorrect shape. Expected (N, 2), got {distance_pairs.shape}")
        return
    
    true_distances = distance_pairs[:, 0]
    gcn_estimated_distances = distance_pairs[:, 1]

    print(f"\nLoaded {len(true_distances)} true vs. GCN estimated distance pairs.")

    # 2. Generate Plot: True Distance vs. GCN Estimated Distance
    plt.style.use('seaborn-v0_8-whitegrid')
    plt.figure(figsize=(12, 10)) # Adjusted figure size for a square-ish plot

    # Scatter plot of GCN's estimated distance vs. true distance
    plt.scatter(true_distances, gcn_estimated_distances, alpha=0.2, s=10, label='GCN Estimated Distance', color='dodgerblue')

    # Add y=x line for reference (perfect estimation)
    min_val = min(np.min(true_distances), np.min(gcn_estimated_distances)) - 50 # Extend slightly for visibility
    max_val = max(np.max(true_distances), np.max(gcn_estimated_distances)) + 50 # Extend slightly for visibility
    min_val = max(0, min_val) # Ensure plot starts at or after 0 for distances

    plt.plot([min_val, max_val], [min_val, max_val], 'r--', linewidth=2, label='Perfect Estimation (y=x)')

    plt.suptitle('GCN Distance Estimation Performance', fontsize=SUPTITLE_FONT_SIZE, fontweight='bold')
    # plt.title('Comparison of True Distances to GCN Estimated Distances', fontsize=TITLE_FONT_SIZE)
    plt.xlabel('True Distance (m)', fontsize=AXIS_LABEL_FONT_SIZE)
    plt.ylabel("GCN's Estimated Distance (m)", fontsize=AXIS_LABEL_FONT_SIZE)
    
    plt.xticks(fontsize=TICK_LABEL_FONT_SIZE)
    plt.yticks(fontsize=TICK_LABEL_FONT_SIZE)
    
    plt.legend(fontsize=LEGEND_FONT_SIZE)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.axis('equal') # Ensure x and y axes have the same scale for a proper y=x line view
    plt.xlim(left=min_val)
    plt.ylim(bottom=min_val)
    plt.tight_layout(rect=[0, 0, 1, 0.95]) # Adjust layout for suptitle

    output_path = os.path.join(OUTPUT_DIR, OUTPUT_FILENAME)
    plt.savefig(output_path, dpi=300)
    print(f"\nTrue vs. GCN Estimated Distance plot saved to: {output_path}")
    plt.show()
    
    # 3. Calculate Fit Metrics
    if len(true_distances) > 0:
        mse = np.mean((gcn_estimated_distances - true_distances)**2)
        rmse = np.sqrt(mse)
        
        # R-squared (Coefficient of Determination)
        ss_res = np.sum((gcn_estimated_distances - true_distances)**2)
        ss_tot = np.sum((true_distances - np.mean(true_distances))**2)
        r_squared = 1 - (ss_res / ss_tot) if ss_tot > 0 else 0
        
        print("\nFit Metrics for GCN Estimated Distances vs. True Distances:")
        print(f"  Mean Squared Error (MSE): {mse:.4f} m^2")
        print(f"  Root Mean Squared Error (RMSE): {rmse:.4f} m")
        print(f"  R-squared: {r_squared:.4f}")
    else:
        print("No data points to calculate fit metrics.")

if __name__ == '__main__':
    main()
    print("\nScript finished.")
